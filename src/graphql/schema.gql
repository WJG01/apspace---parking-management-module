input ScheduleInput {
  classcode: String!
  date: String!
  startTime: String!
  endTime: String!
  classType: String!
}

input LogInput {
  lectureUpdate: String
  otherInfo: String
  nextLecturePlan: String
}

type Attendance {
  schedule: Schedule!
  secret: String!
  students: [Status!]!
  log: Log
}

type Schedule {
  classcode: String!
  date: String!
  startTime: String!
  endTime: String!
  classType: String!
}

type Status {
  id: String!
  name: String!
  attendance: String!
  absentReason: String
  # Schedule not able to be filtered by subscription
  classcode: String!
  date: String!
  startTime: String!
  endTime: String!
  classType: String!
}

type Log {
  lectureUpdate: String
  otherInfo: String
  nextLecturePlan: String
}

type Query {
  attendance(schedule: ScheduleInput!): Attendance
}

# Mutation requires additional "ticket" header containing service ticket with
# service "https://api.apiit.edu.my/classcodes"

type Mutation {
  # lecturer
  initAttendance(
    schedule: ScheduleInput!
    # added 2020-04-01, default 'N' for backward compatibility
    # can add required constaint later
    attendance: String
  ): Attendance!

  initAttendanceAsPresent(
    schedule: ScheduleInput!
    students: [String!]!
  ): Attendance!

  markAttendance(
    schedule: ScheduleInput!
    student: String!
    attendance: String!
    absentReason: String
  ): Status!

  markAttendanceAll(
    schedule: ScheduleInput!
    attendance: String!
  ): [Status!]!

  saveLectureLog(schedule: ScheduleInput! log: LogInput!): Boolean # void

  resetAttendance(schedule: ScheduleInput!): Boolean # void

  # student
  updateAttendance(otp: String!): Status!
}

type Subscription {
  newStatus(
    classcode: String!
    date: String!
    startTime: String!
    endTime: String!
    classType: String!
  ): Status
  @aws_subscribe(mutations: ["markAttendance", "updateAttendance"])
}

type schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
